name: Github Action 도커 배포

on:
  push:
    branches:
      - main

jobs:
  My-Deploy-Job:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 파일 가져오기
        uses: actions/checkout@v4

      - name: JDK-17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        working-directory: shopbe/shopBE
        run: |
          mkdir -p ./src/main/resources
          echo "${{secrets.APPLICATION_PROPERTIES}}" | base64 -d > ./src/main/resources/application.yml

      - name: 빌드 권한 부여
        working-directory: shopbe/shopBE
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기
        working-directory: shopbe/shopBE
        run: ./gradlew clean build

      - name: AWS Resource에 접근 가능한 AWS credential 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        working-directory: shopbe/shopBE
        run: docker build -t shop/server .

      - name: Docker 이미지에 태그를 붙임
        working-directory: shopbe/shopBE
        run: docker tag shop/server ${{steps.login-ecr.outputs.registry}}/shop/server:latest

      - name: ECR에 도커 이미지 푸시
        working-directory: shopbe/shopBE
        run: docker push ${{steps.login-ecr.outputs.registry}}/shop/server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop shop-server || true
            docker rm shop-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/shop/server:latest
            docker run -d --restart unless-stopped --name shop-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/shop/server:latest
            docker logs shop-server
